const fetch=(...e)=>import("cross-fetch").then(({default:r})=>r(...e)),uparser=require("url-parse");class ExchangeRate{constructor(r={url:"https://api.exchangerate.host",primaryCurrency:"USD"}){this.url=uparser(r.url).protocol+"//"+uparser(r.url).host,this.primaryCurrency=r.primaryCurrency,0!==this.url&&"//"!==this.url&&void 0!==this.url&&null!==this.url||(this.url="https://api.exchangerate.host"),0!==this.primaryCurrency&&"//"!==this.primaryCurrency&&void 0!==this.primaryCurrency&&null!==this.primaryCurrency||(this.primaryCurrency="USD")}async getExchangeRate(r="GBP",e=this.primaryCurrency){if("string"!=typeof r)throw new TypeError("Expected type is string:ISO4217. Type is: "+typeof r);e=await fetch(`${this.url}/convert?from=${r}&to=${e}`).then(r=>r.json()).catch(()=>"falseError");if("falseError"===e)throw new Error("An error occurred while fetching the exchange rate");if(null===e.info.rate)throw new Error("An error occured while fetching the exchange rate: an invalid currency was entered, or no data is currently available");return e.info.rate}async getHistoricalRates(r,e,t){if(!Array.isArray(r))throw new TypeError("Expected type is array:ISO4217. Type is: "+typeof r);if("object"!=typeof e)throw new TypeError("Expected type is object:Date. Type is: "+typeof e);if("object"!=typeof t)throw new TypeError("Expected type is object:Date. Type is: "+typeof t);r=await fetch(`${this.url}/timeseries?base=${this.primaryCurrency}&start_date=${e.toISOString()}&end_date=${t.toISOString()}&symbols=${r.join(",")}`).then(r=>r.json()).catch(()=>"falseError");if("falseError"===r)throw new Error("An error occurred while fetching historical exchange rates");if(null===r.rates)throw new Error("An error occured while fetching historical exchange rates: an invalid currency was entered, or no data is currently available");return r.rates}async getFluctuations(r,e,t){if(!Array.isArray(r))throw new TypeError("Expected type is array:ISO4217. Type is: "+typeof r);if("object"!=typeof e)throw new TypeError("Expected type is object:Date. Type is: "+typeof e);if("object"!=typeof t)throw new TypeError("Expected type is object:Date. Type is: "+typeof t);r=await fetch(`${this.url}/fluctuation?base=${this.primaryCurrency}&start_date=${e.toISOString().split("T")[0]}&end_date=${t.toISOString().split("T")[0]}&symbols=${r.join(",")}`).then(r=>r.json()).catch(()=>"falseError");if("falseError"===r)throw new Error("An error occurred while fetching fluctuation data");if(null===r.rates)throw new Error("An error occured while fetching fluctuation data: an invalid currency was entered, or no data is currently available");return r.rates}async getBulkExchangeRates(r){if(!Array.isArray(r))throw new TypeError("Expected type is array:ISO4217. Type is: "+typeof r);r=await fetch(`${this.url}/latest?base=${this.primaryCurrency}&symbols=${r.join(",")}`).then(r=>r.json()).catch(()=>"falseError");if("falseError"===r)throw new Error("An error occurred while fetching historical exchange rates");if(null===r.rates)throw new Error("An error occured while fetching historical exchange rates: an invalid currency was entered, or no data is currently available");return r.rates}async getISO4217Codes(){var r=await fetch(`${this.url}/symbols`).then(r=>r.json()).catch(()=>"falseError");if("falseError"===r)throw new Error("An error occurred while fetching ISO 4217 codes");return r.symbols}}module.exports=ExchangeRate,global.NodeExr=module.exports;